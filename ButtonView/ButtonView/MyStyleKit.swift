//
//  MyStyleKit.swift
//  ButtonView
//
//  Created by luowei on 2016/10/17.
//  Copyright (c) 2016 wodedata. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class MyStyleKit : NSObject {
    
    //// Cache
    
    private struct Cache {
        static let color: UIColor = UIColor(red: 0.023, green: 0.648, blue: 0.023, alpha: 1.000)
    }
    
    //// Colors
    
    public class var color: UIColor { return Cache.color }
    
    //// Drawing Methods
    
    public class func drawCanvas1(frame: CGRect = CGRect(x:43, y:36, width:113, height:44), btnText: String = "确 定") {
        //// General Declarations
        guard let context = UIGraphicsGetCurrentContext() as CGContext? else{
            return
        }
        
        //// Color Declarations
        let color2 = MyStyleKit.color.colorWithHue(newHue: 0.2)
        let color3 = MyStyleKit.color.colorWithBrightness(newBrightness: 0.4)
        
        //// Rectangle Drawing
        let rect = CGRect(x:frame.minX + floor((frame.width - 8) * 0.07619 + 0.5), y:frame.minY + floor((frame.height - 6) * 0.18421 + 0.5), width:frame.width - 8 - floor((frame.width - 8) * 0.07619 + 0.5), height:frame.height - 6 - floor((frame.height - 6) * 0.18421 + 0.5))
        let rectanglePath = UIBezierPath(roundedRect: rect, cornerRadius: 5)
        color2.setFill()
        rectanglePath.fill()
        MyStyleKit.color.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()
        
        
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x:frame.minX + floor(frame.width * 0.09735 + 0.5), y:frame.minY + floor(frame.height * 0.23864) + 0.5, width:floor(frame.width * 0.30088 + 0.5) - floor(frame.width * 0.09735 + 0.5), height:floor(frame.height * 0.78409) - floor(frame.height * 0.23864)))
        color3.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()
        
        
        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x:frame.minX + 0.20182 * frame.width, y:frame.minY + 0.28409 * frame.height))
        starPath.addLine(to:CGPoint(x:frame.minX + 0.21906 * frame.width, y:frame.minY + 0.43885 * frame.height))
        starPath.addLine(to:CGPoint(x:frame.minX + 0.27356 * frame.width, y:frame.minY + 0.44038 * frame.height))
        starPath.addLine(to:CGPoint(x:frame.minX + 0.23199 * frame.width, y:frame.minY + 0.54600 * frame.height))
        starPath.addLine(to:CGPoint(x:frame.minX + 0.24616 * frame.width, y:frame.minY + 0.69327 * frame.height))
        starPath.addLine(to:CGPoint(x:frame.minX + 0.20613 * frame.width, y:frame.minY + 0.61742 * frame.height))
        starPath.addLine(to:CGPoint(x:frame.minX + 0.15872 * frame.width, y:frame.minY + 0.70076 * frame.height))
        starPath.addLine(to:CGPoint(x:frame.minX + 0.17165 * frame.width, y:frame.minY + 0.54600 * frame.height))
        starPath.addLine(to:CGPoint(x:frame.minX + 0.13008 * frame.width, y:frame.minY + 0.44038 * frame.height))
        starPath.addLine(to:CGPoint(x:frame.minX + 0.18458 * frame.width, y:frame.minY + 0.43885 * frame.height))
        starPath.addLine(to:CGPoint(x:frame.minX + 0.20182 * frame.width, y:frame.minY + 0.28409 * frame.height))
        starPath.close()
        color3.setStroke()
        starPath.lineWidth = 1
        starPath.stroke()
        
        
        //// Text Drawing
        let textRect = CGRect(x:frame.minX + floor(frame.width * 0.32743 + 0.5), y:frame.minY + floor(frame.height * 0.31818 + 0.5), width:floor(frame.width * 0.90265 + 0.5) - floor(frame.width * 0.32743 + 0.5), height:floor(frame.height * 0.70455 + 0.5) - floor(frame.height * 0.31818 + 0.5))
        let textStyle = NSParagraphStyle.default.mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = .center
        
        let textFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: UIFont.labelFontSize), NSForegroundColorAttributeName: color3, NSParagraphStyleAttributeName: textStyle]
        
        let textTextHeight: CGFloat = NSString(string: btnText).boundingRect(with: CGSize(width:textRect.width, height:CGFloat.infinity), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        context.saveGState()
        context.clip(to: textRect);
        NSString(string: btnText).draw(in: CGRect(x:textRect.minX, y:textRect.minY + (textRect.height - textTextHeight) / 2, width:textRect.width, height:textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
    }
    
}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
