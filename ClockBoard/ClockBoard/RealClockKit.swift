//
//  RealClockKit.swift
//  ProjectName
//
//  Created by luowei on 2016/10/17.
//  Copyright (c) 2016 wodedata. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class RealClockKit : NSObject {

    //// Drawing Methods

    public class func drawColock(hours hours: CGFloat = 0, minutes: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let gradientColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.000)
        let gradientColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.002)
        let circleColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.116)
        let gradientColor4 = UIColor(red: 0.972, green: 0.198, blue: 0.117, alpha: 1.000)
        let gradientColor5 = UIColor(red: 0.796, green: 0.000, blue: 0.019, alpha: 1.000)
        let gradientColor6 = UIColor(red: 0.487, green: 0.222, blue: 0.044, alpha: 1.000)
        let gradientColor7 = UIColor(red: 0.863, green: 0.615, blue: 0.212, alpha: 1.000)
        let gradientColor8 = UIColor(red: 0.392, green: 0.273, blue: 0.050, alpha: 1.000)
        let gradientColor9 = UIColor(red: 0.932, green: 0.748, blue: 0.340, alpha: 1.000)
        let gradientColor10 = UIColor(red: 0.472, green: 0.320, blue: 0.087, alpha: 1.000)
        let gradientColor11 = UIColor(red: 0.884, green: 0.476, blue: 0.170, alpha: 1.000)
        let gradientColor12 = UIColor(red: 0.997, green: 0.868, blue: 0.617, alpha: 1.000)
        let gradientColor13 = UIColor(red: 0.733, green: 0.517, blue: 0.103, alpha: 1.000)
        let gradientColor14 = UIColor(red: 0.997, green: 0.870, blue: 0.561, alpha: 1.000)
        let gradientColor15 = UIColor(red: 0.796, green: 0.519, blue: 0.109, alpha: 1.000)
        let gradientColor16 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let gradientColor17 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.002)
        let gradientColor18 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.522)
        let gradientColor19 = UIColor(red: 0.304, green: 0.165, blue: 0.044, alpha: 1.000)
        let gradientColor20 = UIColor(red: 0.274, green: 0.229, blue: 0.037, alpha: 1.000)
        let gradientColor21 = UIColor(red: 0.338, green: 0.168, blue: 0.029, alpha: 1.000)
        let gradientColor22 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let gradientColor23 = UIColor(red: 0.551, green: 0.551, blue: 0.551, alpha: 1.000)
        let fillColor = UIColor(red: 0.074, green: 0.074, blue: 0.074, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.321)
        let fillColor4 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.574)
        let strokeColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.187)
        let fillColor6 = UIColor(red: 0.387, green: 0.387, blue: 0.387, alpha: 1.000)

        //// Gradient Declarations
        let linearGradient15 = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradientColor.CGColor, gradientColor2.CGColor, circleColor.CGColor], [0, 0.55, 1])!
        let hourGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradientColor4.CGColor, gradientColor5.CGColor], [0, 1])!
        let outGradient2 = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradientColor6.CGColor, gradientColor7.CGColor, gradientColor8.CGColor, gradientColor9.CGColor, gradientColor10.CGColor], [0, 0.27, 0.49, 0.76, 1])!
        let outGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradientColor11.CGColor, gradientColor12.CGColor, gradientColor13.CGColor, gradientColor14.CGColor, gradientColor15.CGColor], [0, 0.27, 0.49, 0.76, 1])!
        let linearGradient8 = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradientColor16.CGColor, gradientColor17.CGColor, gradientColor18.CGColor], [0, 0.45, 1])!
        let linearGradient5 = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradientColor19.CGColor, gradientColor20.CGColor, gradientColor21.CGColor], [0, 0.5, 1])!
        let minuteGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradientColor22.CGColor, gradientColor23.CGColor], [0, 1])!
        let centerGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradientColor15.CGColor, gradientColor12.CGColor, gradientColor7.CGColor], [0, 0.49, 0.97])!

        //// Variable Declarations
        let minuteAngle: CGFloat = -(minutes / 60.0 * 360) + 29
        let hourAngle: CGFloat = -(hours / 12.0 * 360 - minuteAngle / 12.0) - 30

        //// Clock
        //// Artboard
        //// Barometer
        //// Group 6
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 22, y: 22, width: 360, height: 360))
        fillColor.setFill()
        oval2Path.fill()


        //// Oval-1
        //// path-2 Drawing
        let path2Path = UIBezierPath()
        path2Path.moveToPoint(CGPoint(x: 202, y: 382))
        path2Path.addCurveToPoint(CGPoint(x: 382, y: 202), controlPoint1: CGPoint(x: 301.41, y: 382), controlPoint2: CGPoint(x: 382, y: 301.41))
        path2Path.addCurveToPoint(CGPoint(x: 202, y: 22), controlPoint1: CGPoint(x: 382, y: 102.59), controlPoint2: CGPoint(x: 301.41, y: 22))
        path2Path.addCurveToPoint(CGPoint(x: 22, y: 202), controlPoint1: CGPoint(x: 102.59, y: 22), controlPoint2: CGPoint(x: 22, y: 102.59))
        path2Path.addCurveToPoint(CGPoint(x: 202, y: 382), controlPoint1: CGPoint(x: 22, y: 301.41), controlPoint2: CGPoint(x: 102.59, y: 382))
        path2Path.closePath()
        path2Path.moveToPoint(CGPoint(x: 202.64, y: 364.64))
        path2Path.addCurveToPoint(CGPoint(x: 364.64, y: 202.64), controlPoint1: CGPoint(x: 292.11, y: 364.64), controlPoint2: CGPoint(x: 364.64, y: 292.11))
        path2Path.addCurveToPoint(CGPoint(x: 202.64, y: 40.64), controlPoint1: CGPoint(x: 364.64, y: 113.17), controlPoint2: CGPoint(x: 292.11, y: 40.64))
        path2Path.addCurveToPoint(CGPoint(x: 40.64, y: 202.64), controlPoint1: CGPoint(x: 113.17, y: 40.64), controlPoint2: CGPoint(x: 40.64, y: 113.17))
        path2Path.addCurveToPoint(CGPoint(x: 202.64, y: 364.64), controlPoint1: CGPoint(x: 40.64, y: 292.11), controlPoint2: CGPoint(x: 113.17, y: 364.64))
        path2Path.closePath()
        path2Path.miterLimit = 4;

        path2Path.usesEvenOddFillRule = true;

        fillColor2.setFill()
        path2Path.fill()


        //// path- Drawing
        let pathPath = UIBezierPath()
        pathPath.moveToPoint(CGPoint(x: 202, y: 382))
        pathPath.addCurveToPoint(CGPoint(x: 382, y: 202), controlPoint1: CGPoint(x: 301.41, y: 382), controlPoint2: CGPoint(x: 382, y: 301.41))
        pathPath.addCurveToPoint(CGPoint(x: 202, y: 22), controlPoint1: CGPoint(x: 382, y: 102.59), controlPoint2: CGPoint(x: 301.41, y: 22))
        pathPath.addCurveToPoint(CGPoint(x: 22, y: 202), controlPoint1: CGPoint(x: 102.59, y: 22), controlPoint2: CGPoint(x: 22, y: 102.59))
        pathPath.addCurveToPoint(CGPoint(x: 202, y: 382), controlPoint1: CGPoint(x: 22, y: 301.41), controlPoint2: CGPoint(x: 102.59, y: 382))
        pathPath.closePath()
        pathPath.moveToPoint(CGPoint(x: 202.64, y: 364.64))
        pathPath.addCurveToPoint(CGPoint(x: 364.64, y: 202.64), controlPoint1: CGPoint(x: 292.11, y: 364.64), controlPoint2: CGPoint(x: 364.64, y: 292.11))
        pathPath.addCurveToPoint(CGPoint(x: 202.64, y: 40.64), controlPoint1: CGPoint(x: 364.64, y: 113.17), controlPoint2: CGPoint(x: 292.11, y: 40.64))
        pathPath.addCurveToPoint(CGPoint(x: 40.64, y: 202.64), controlPoint1: CGPoint(x: 113.17, y: 40.64), controlPoint2: CGPoint(x: 40.64, y: 113.17))
        pathPath.addCurveToPoint(CGPoint(x: 202.64, y: 364.64), controlPoint1: CGPoint(x: 40.64, y: 292.11), controlPoint2: CGPoint(x: 113.17, y: 364.64))
        pathPath.closePath()
        pathPath.miterLimit = 4;

        pathPath.usesEvenOddFillRule = true;

        CGContextSaveGState(context!)
        pathPath.addClip()
        CGContextDrawLinearGradient(context!, outGradient2,
            CGPoint(x: 118.74, y: 357.25),
            CGPoint(x: 280.74, y: 44.5),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context!)




        //// Oval- 3 Drawing
        let oval3Path = UIBezierPath()
        oval3Path.moveToPoint(CGPoint(x: 202, y: 370))
        oval3Path.addCurveToPoint(CGPoint(x: 370, y: 202), controlPoint1: CGPoint(x: 294.78, y: 370), controlPoint2: CGPoint(x: 370, y: 294.78))
        oval3Path.addCurveToPoint(CGPoint(x: 202, y: 34), controlPoint1: CGPoint(x: 370, y: 109.22), controlPoint2: CGPoint(x: 294.78, y: 34))
        oval3Path.addCurveToPoint(CGPoint(x: 34, y: 202), controlPoint1: CGPoint(x: 109.22, y: 34), controlPoint2: CGPoint(x: 34, y: 109.22))
        oval3Path.addCurveToPoint(CGPoint(x: 202, y: 370), controlPoint1: CGPoint(x: 34, y: 294.78), controlPoint2: CGPoint(x: 109.22, y: 370))
        oval3Path.closePath()
        oval3Path.moveToPoint(CGPoint(x: 202.64, y: 364.64))
        oval3Path.addCurveToPoint(CGPoint(x: 364.64, y: 202.64), controlPoint1: CGPoint(x: 292.11, y: 364.64), controlPoint2: CGPoint(x: 364.64, y: 292.11))
        oval3Path.addCurveToPoint(CGPoint(x: 202.64, y: 40.64), controlPoint1: CGPoint(x: 364.64, y: 113.17), controlPoint2: CGPoint(x: 292.11, y: 40.64))
        oval3Path.addCurveToPoint(CGPoint(x: 40.64, y: 202.64), controlPoint1: CGPoint(x: 113.17, y: 40.64), controlPoint2: CGPoint(x: 40.64, y: 113.17))
        oval3Path.addCurveToPoint(CGPoint(x: 202.64, y: 364.64), controlPoint1: CGPoint(x: 40.64, y: 292.11), controlPoint2: CGPoint(x: 113.17, y: 364.64))
        oval3Path.closePath()
        oval3Path.miterLimit = 4;

        oval3Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context!)
        oval3Path.addClip()
        CGContextDrawLinearGradient(context!, outGradient,
            CGPoint(x: 124.29, y: 346.9),
            CGPoint(x: 275.49, y: 55),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context!)


        //// Oval- 4 Drawing
        let oval4Path = UIBezierPath()
        oval4Path.moveToPoint(CGPoint(x: 202, y: 369))
        oval4Path.addCurveToPoint(CGPoint(x: 369, y: 202), controlPoint1: CGPoint(x: 294.23, y: 369), controlPoint2: CGPoint(x: 369, y: 294.23))
        oval4Path.addCurveToPoint(CGPoint(x: 202, y: 35), controlPoint1: CGPoint(x: 369, y: 109.77), controlPoint2: CGPoint(x: 294.23, y: 35))
        oval4Path.addCurveToPoint(CGPoint(x: 35, y: 202), controlPoint1: CGPoint(x: 109.77, y: 35), controlPoint2: CGPoint(x: 35, y: 109.77))
        oval4Path.addCurveToPoint(CGPoint(x: 202, y: 369), controlPoint1: CGPoint(x: 35, y: 294.23), controlPoint2: CGPoint(x: 109.77, y: 369))
        oval4Path.closePath()
        oval4Path.moveToPoint(CGPoint(x: 202.97, y: 363.2))
        oval4Path.addCurveToPoint(CGPoint(x: 363.2, y: 202.97), controlPoint1: CGPoint(x: 291.46, y: 363.2), controlPoint2: CGPoint(x: 363.2, y: 291.46))
        oval4Path.addCurveToPoint(CGPoint(x: 202.97, y: 42.74), controlPoint1: CGPoint(x: 363.2, y: 114.47), controlPoint2: CGPoint(x: 291.46, y: 42.74))
        oval4Path.addCurveToPoint(CGPoint(x: 42.74, y: 202.97), controlPoint1: CGPoint(x: 114.47, y: 42.74), controlPoint2: CGPoint(x: 42.74, y: 114.47))
        oval4Path.addCurveToPoint(CGPoint(x: 202.97, y: 363.2), controlPoint1: CGPoint(x: 42.74, y: 291.46), controlPoint2: CGPoint(x: 114.47, y: 363.2))
        oval4Path.closePath()
        oval4Path.miterLimit = 4;

        oval4Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context!)
        oval4Path.addClip()
        CGContextDrawLinearGradient(context!, linearGradient5,
            CGPoint(x: 89.48, y: 84.97),
            CGPoint(x: 328.69, y: 303.88),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context!)




        //// Oval- 5
        CGContextSaveGState(context!)
        CGContextSetAlpha(context!, 0.08)
        CGContextBeginTransparencyLayer(context!, nil)


        //// path-6 Drawing
        let path6Path = UIBezierPath(ovalInRect: CGRect(x: 45, y: 45, width: 314, height: 314))
        fillColor2.setFill()
        path6Path.fill()


        //// path- 3 Drawing
        let path3Path = UIBezierPath(ovalInRect: CGRect(x: 45, y: 45, width: 314, height: 314))
        fillColor2.setFill()
        path3Path.fill()


        CGContextEndTransparencyLayer(context!)
        CGContextRestoreGState(context!)


        //// Oval- 8 Drawing
        let oval8Path = UIBezierPath()
        oval8Path.moveToPoint(CGPoint(x: 202.94, y: 357.94))
        oval8Path.addCurveToPoint(CGPoint(x: 357.94, y: 202.94), controlPoint1: CGPoint(x: 288.54, y: 357.94), controlPoint2: CGPoint(x: 357.94, y: 288.54))
        oval8Path.addCurveToPoint(CGPoint(x: 202.94, y: 47.94), controlPoint1: CGPoint(x: 357.94, y: 117.33), controlPoint2: CGPoint(x: 288.54, y: 47.94))
        oval8Path.addCurveToPoint(CGPoint(x: 47.94, y: 202.94), controlPoint1: CGPoint(x: 117.33, y: 47.94), controlPoint2: CGPoint(x: 47.94, y: 117.33))
        oval8Path.addCurveToPoint(CGPoint(x: 202.94, y: 357.94), controlPoint1: CGPoint(x: 47.94, y: 288.54), controlPoint2: CGPoint(x: 117.33, y: 357.94))
        oval8Path.closePath()
        oval8Path.miterLimit = 4;

        oval8Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context!)
        oval8Path.addClip()
        CGContextDrawLinearGradient(context!, linearGradient8,
            CGPoint(x: 225.67, y: 166.19),
            CGPoint(x: 123.51, y: 336.92),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context!)


        //// Oval-813 Drawing
        let oval813Path = UIBezierPath(ovalInRect: CGRect(x: 72, y: 72, width: 260, height: 260))
        fillColor3.setFill()
        oval813Path.fill()


        //// Combined-Shape Drawing
        let combinedShapePath = UIBezierPath()
        combinedShapePath.moveToPoint(CGPoint(x: 202, y: 331))
        combinedShapePath.addCurveToPoint(CGPoint(x: 331, y: 202), controlPoint1: CGPoint(x: 273.24, y: 331), controlPoint2: CGPoint(x: 331, y: 273.24))
        combinedShapePath.addCurveToPoint(CGPoint(x: 202, y: 73), controlPoint1: CGPoint(x: 331, y: 130.76), controlPoint2: CGPoint(x: 273.24, y: 73))
        combinedShapePath.addCurveToPoint(CGPoint(x: 73, y: 202), controlPoint1: CGPoint(x: 130.76, y: 73), controlPoint2: CGPoint(x: 73, y: 130.76))
        combinedShapePath.addCurveToPoint(CGPoint(x: 202, y: 331), controlPoint1: CGPoint(x: 73, y: 273.24), controlPoint2: CGPoint(x: 130.76, y: 331))
        combinedShapePath.closePath()
        combinedShapePath.moveToPoint(CGPoint(x: 202, y: 330))
        combinedShapePath.addCurveToPoint(CGPoint(x: 330, y: 202), controlPoint1: CGPoint(x: 272.69, y: 330), controlPoint2: CGPoint(x: 330, y: 272.69))
        combinedShapePath.addCurveToPoint(CGPoint(x: 202, y: 74), controlPoint1: CGPoint(x: 330, y: 131.31), controlPoint2: CGPoint(x: 272.69, y: 74))
        combinedShapePath.addCurveToPoint(CGPoint(x: 74, y: 202), controlPoint1: CGPoint(x: 131.31, y: 74), controlPoint2: CGPoint(x: 74, y: 131.31))
        combinedShapePath.addCurveToPoint(CGPoint(x: 202, y: 330), controlPoint1: CGPoint(x: 74, y: 272.69), controlPoint2: CGPoint(x: 131.31, y: 330))
        combinedShapePath.closePath()
        combinedShapePath.miterLimit = 4;

        combinedShapePath.usesEvenOddFillRule = true;

        fillColor4.setFill()
        combinedShapePath.fill()


        //// Group- 10
        //// path-9 Drawing
        let path9Path = UIBezierPath()
        path9Path.moveToPoint(CGPoint(x: 202, y: 242))
        path9Path.addCurveToPoint(CGPoint(x: 242, y: 202), controlPoint1: CGPoint(x: 224.09, y: 242), controlPoint2: CGPoint(x: 242, y: 224.09))
        path9Path.addCurveToPoint(CGPoint(x: 202, y: 162), controlPoint1: CGPoint(x: 242, y: 179.91), controlPoint2: CGPoint(x: 224.09, y: 162))
        path9Path.addCurveToPoint(CGPoint(x: 162, y: 202), controlPoint1: CGPoint(x: 179.91, y: 162), controlPoint2: CGPoint(x: 162, y: 179.91))
        path9Path.addCurveToPoint(CGPoint(x: 202, y: 242), controlPoint1: CGPoint(x: 162, y: 224.09), controlPoint2: CGPoint(x: 179.91, y: 242))
        path9Path.closePath()
        path9Path.miterLimit = 4;

        path9Path.usesEvenOddFillRule = true;

        circleColor.setStroke()
        path9Path.lineWidth = 2
        path9Path.stroke()


        //// Rectangle-2649 Drawing
        let rectangle2649Path = UIBezierPath()
        rectangle2649Path.moveToPoint(CGPoint(x: 235.98, y: 71.31))
        rectangle2649Path.addLineToPoint(CGPoint(x: 237.53, y: 65.55))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 238.75, y: 64.84), controlPoint1: CGPoint(x: 237.67, y: 65.01), controlPoint2: CGPoint(x: 238.22, y: 64.7))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 239.46, y: 66.06), controlPoint1: CGPoint(x: 239.29, y: 64.98), controlPoint2: CGPoint(x: 239.6, y: 65.53))
        rectangle2649Path.addLineToPoint(CGPoint(x: 237.91, y: 71.83))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 235.98, y: 71.31), controlPoint1: CGPoint(x: 237.27, y: 71.65), controlPoint2: CGPoint(x: 236.63, y: 71.48))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 268.64, y: 84.57))
        rectangle2649Path.addLineToPoint(CGPoint(x: 271.63, y: 79.39))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 273, y: 79.02), controlPoint1: CGPoint(x: 271.91, y: 78.91), controlPoint2: CGPoint(x: 272.52, y: 78.75))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 273.37, y: 80.39), controlPoint1: CGPoint(x: 273.48, y: 79.3), controlPoint2: CGPoint(x: 273.64, y: 79.91))
        rectangle2649Path.addLineToPoint(CGPoint(x: 270.37, y: 85.57))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 268.64, y: 84.57), controlPoint1: CGPoint(x: 269.8, y: 85.23), controlPoint2: CGPoint(x: 269.22, y: 84.9))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 296.75, y: 105.84))
        rectangle2649Path.addLineToPoint(CGPoint(x: 300.99, y: 101.59))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 302.41, y: 101.59), controlPoint1: CGPoint(x: 301.39, y: 101.2), controlPoint2: CGPoint(x: 302.02, y: 101.2))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 302.41, y: 103.01), controlPoint1: CGPoint(x: 302.8, y: 101.98), controlPoint2: CGPoint(x: 302.8, y: 102.61))
        rectangle2649Path.addLineToPoint(CGPoint(x: 298.16, y: 107.25))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 296.75, y: 105.84), controlPoint1: CGPoint(x: 297.7, y: 106.78), controlPoint2: CGPoint(x: 297.22, y: 106.3))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 318.43, y: 133.63))
        rectangle2649Path.addLineToPoint(CGPoint(x: 323.61, y: 130.63))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 324.98, y: 131), controlPoint1: CGPoint(x: 324.09, y: 130.35), controlPoint2: CGPoint(x: 324.7, y: 130.52))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 324.61, y: 132.37), controlPoint1: CGPoint(x: 325.25, y: 131.48), controlPoint2: CGPoint(x: 325.09, y: 132.09))
        rectangle2649Path.addLineToPoint(CGPoint(x: 319.43, y: 135.36))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 318.43, y: 133.63), controlPoint1: CGPoint(x: 319.1, y: 134.78), controlPoint2: CGPoint(x: 318.77, y: 134.2))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 332.17, y: 166.09))
        rectangle2649Path.addLineToPoint(CGPoint(x: 337.94, y: 164.54))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 339.16, y: 165.25), controlPoint1: CGPoint(x: 338.48, y: 164.4), controlPoint2: CGPoint(x: 339.02, y: 164.71))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 338.45, y: 166.47), controlPoint1: CGPoint(x: 339.31, y: 165.78), controlPoint2: CGPoint(x: 338.99, y: 166.33))
        rectangle2649Path.addLineToPoint(CGPoint(x: 332.69, y: 168.02))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 332.17, y: 166.09), controlPoint1: CGPoint(x: 332.52, y: 167.37), controlPoint2: CGPoint(x: 332.35, y: 166.73))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 337, y: 201))
        rectangle2649Path.addLineToPoint(CGPoint(x: 343, y: 201))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 344, y: 202), controlPoint1: CGPoint(x: 343.56, y: 201), controlPoint2: CGPoint(x: 344, y: 201.45))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 343, y: 203), controlPoint1: CGPoint(x: 344, y: 202.56), controlPoint2: CGPoint(x: 343.55, y: 203))
        rectangle2649Path.addLineToPoint(CGPoint(x: 337, y: 203))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 337, y: 202), controlPoint1: CGPoint(x: 337, y: 202.67), controlPoint2: CGPoint(x: 337, y: 202.33))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 337, y: 201), controlPoint1: CGPoint(x: 337, y: 201.67), controlPoint2: CGPoint(x: 337, y: 201.33))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 332.69, y: 235.98))
        rectangle2649Path.addLineToPoint(CGPoint(x: 338.45, y: 237.53))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 339.16, y: 238.75), controlPoint1: CGPoint(x: 338.99, y: 237.67), controlPoint2: CGPoint(x: 339.3, y: 238.22))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 337.94, y: 239.46), controlPoint1: CGPoint(x: 339.02, y: 239.29), controlPoint2: CGPoint(x: 338.47, y: 239.6))
        rectangle2649Path.addLineToPoint(CGPoint(x: 332.17, y: 237.91))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 332.69, y: 235.98), controlPoint1: CGPoint(x: 332.35, y: 237.27), controlPoint2: CGPoint(x: 332.52, y: 236.63))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 319.43, y: 268.64))
        rectangle2649Path.addLineToPoint(CGPoint(x: 324.61, y: 271.63))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 324.98, y: 273), controlPoint1: CGPoint(x: 325.09, y: 271.91), controlPoint2: CGPoint(x: 325.25, y: 272.52))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 323.61, y: 273.37), controlPoint1: CGPoint(x: 324.7, y: 273.48), controlPoint2: CGPoint(x: 324.09, y: 273.64))
        rectangle2649Path.addLineToPoint(CGPoint(x: 318.43, y: 270.37))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 319.43, y: 268.64), controlPoint1: CGPoint(x: 318.77, y: 269.8), controlPoint2: CGPoint(x: 319.1, y: 269.22))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 298.16, y: 296.75))
        rectangle2649Path.addLineToPoint(CGPoint(x: 302.41, y: 300.99))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 302.41, y: 302.41), controlPoint1: CGPoint(x: 302.8, y: 301.39), controlPoint2: CGPoint(x: 302.8, y: 302.02))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 300.99, y: 302.41), controlPoint1: CGPoint(x: 302.02, y: 302.8), controlPoint2: CGPoint(x: 301.39, y: 302.8))
        rectangle2649Path.addLineToPoint(CGPoint(x: 296.75, y: 298.16))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 298.16, y: 296.75), controlPoint1: CGPoint(x: 297.22, y: 297.7), controlPoint2: CGPoint(x: 297.7, y: 297.22))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 270.37, y: 318.43))
        rectangle2649Path.addLineToPoint(CGPoint(x: 273.37, y: 323.61))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 273, y: 324.98), controlPoint1: CGPoint(x: 273.65, y: 324.09), controlPoint2: CGPoint(x: 273.48, y: 324.7))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 271.63, y: 324.61), controlPoint1: CGPoint(x: 272.52, y: 325.25), controlPoint2: CGPoint(x: 271.91, y: 325.09))
        rectangle2649Path.addLineToPoint(CGPoint(x: 268.64, y: 319.43))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 270.37, y: 318.43), controlPoint1: CGPoint(x: 269.22, y: 319.1), controlPoint2: CGPoint(x: 269.8, y: 318.77))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 237.91, y: 332.17))
        rectangle2649Path.addLineToPoint(CGPoint(x: 239.46, y: 337.94))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 238.75, y: 339.16), controlPoint1: CGPoint(x: 239.6, y: 338.48), controlPoint2: CGPoint(x: 239.29, y: 339.02))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 237.53, y: 338.45), controlPoint1: CGPoint(x: 238.22, y: 339.31), controlPoint2: CGPoint(x: 237.67, y: 338.99))
        rectangle2649Path.addLineToPoint(CGPoint(x: 235.98, y: 332.69))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 237.91, y: 332.17), controlPoint1: CGPoint(x: 236.63, y: 332.52), controlPoint2: CGPoint(x: 237.27, y: 332.35))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 203, y: 337))
        rectangle2649Path.addLineToPoint(CGPoint(x: 203, y: 343))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 202, y: 344), controlPoint1: CGPoint(x: 203, y: 343.56), controlPoint2: CGPoint(x: 202.55, y: 344))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 201, y: 343), controlPoint1: CGPoint(x: 201.44, y: 344), controlPoint2: CGPoint(x: 201, y: 343.55))
        rectangle2649Path.addLineToPoint(CGPoint(x: 201, y: 337))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 202, y: 337), controlPoint1: CGPoint(x: 201.33, y: 337), controlPoint2: CGPoint(x: 201.67, y: 337))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 203, y: 337), controlPoint1: CGPoint(x: 202.33, y: 337), controlPoint2: CGPoint(x: 202.67, y: 337))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 168.02, y: 332.69))
        rectangle2649Path.addLineToPoint(CGPoint(x: 166.47, y: 338.45))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 165.25, y: 339.16), controlPoint1: CGPoint(x: 166.33, y: 338.99), controlPoint2: CGPoint(x: 165.78, y: 339.3))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 164.54, y: 337.94), controlPoint1: CGPoint(x: 164.71, y: 339.02), controlPoint2: CGPoint(x: 164.4, y: 338.47))
        rectangle2649Path.addLineToPoint(CGPoint(x: 166.09, y: 332.17))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 168.02, y: 332.69), controlPoint1: CGPoint(x: 166.73, y: 332.35), controlPoint2: CGPoint(x: 167.37, y: 332.52))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 135.36, y: 319.43))
        rectangle2649Path.addLineToPoint(CGPoint(x: 132.37, y: 324.61))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 131, y: 324.98), controlPoint1: CGPoint(x: 132.09, y: 325.09), controlPoint2: CGPoint(x: 131.48, y: 325.25))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 130.63, y: 323.61), controlPoint1: CGPoint(x: 130.52, y: 324.7), controlPoint2: CGPoint(x: 130.36, y: 324.09))
        rectangle2649Path.addLineToPoint(CGPoint(x: 133.63, y: 318.43))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 135.36, y: 319.43), controlPoint1: CGPoint(x: 134.2, y: 318.77), controlPoint2: CGPoint(x: 134.78, y: 319.1))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 107.25, y: 298.16))
        rectangle2649Path.addLineToPoint(CGPoint(x: 103.01, y: 302.41))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 101.59, y: 302.41), controlPoint1: CGPoint(x: 102.61, y: 302.8), controlPoint2: CGPoint(x: 101.98, y: 302.8))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 101.59, y: 300.99), controlPoint1: CGPoint(x: 101.2, y: 302.02), controlPoint2: CGPoint(x: 101.2, y: 301.39))
        rectangle2649Path.addLineToPoint(CGPoint(x: 105.84, y: 296.75))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 107.25, y: 298.16), controlPoint1: CGPoint(x: 106.3, y: 297.22), controlPoint2: CGPoint(x: 106.78, y: 297.7))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 85.57, y: 270.37))
        rectangle2649Path.addLineToPoint(CGPoint(x: 80.39, y: 273.37))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 79.02, y: 273), controlPoint1: CGPoint(x: 79.91, y: 273.65), controlPoint2: CGPoint(x: 79.3, y: 273.48))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 79.39, y: 271.63), controlPoint1: CGPoint(x: 78.75, y: 272.52), controlPoint2: CGPoint(x: 78.91, y: 271.91))
        rectangle2649Path.addLineToPoint(CGPoint(x: 84.57, y: 268.64))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 85.57, y: 270.37), controlPoint1: CGPoint(x: 84.9, y: 269.22), controlPoint2: CGPoint(x: 85.23, y: 269.8))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 71.83, y: 237.91))
        rectangle2649Path.addLineToPoint(CGPoint(x: 66.06, y: 239.46))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 64.84, y: 238.75), controlPoint1: CGPoint(x: 65.52, y: 239.6), controlPoint2: CGPoint(x: 64.98, y: 239.29))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 65.55, y: 237.53), controlPoint1: CGPoint(x: 64.69, y: 238.22), controlPoint2: CGPoint(x: 65.01, y: 237.67))
        rectangle2649Path.addLineToPoint(CGPoint(x: 71.31, y: 235.98))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 71.83, y: 237.91), controlPoint1: CGPoint(x: 71.48, y: 236.63), controlPoint2: CGPoint(x: 71.65, y: 237.27))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 67, y: 203))
        rectangle2649Path.addLineToPoint(CGPoint(x: 61, y: 203))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 60, y: 202), controlPoint1: CGPoint(x: 60.44, y: 203), controlPoint2: CGPoint(x: 60, y: 202.55))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 61, y: 201), controlPoint1: CGPoint(x: 60, y: 201.44), controlPoint2: CGPoint(x: 60.45, y: 201))
        rectangle2649Path.addLineToPoint(CGPoint(x: 67, y: 201))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 67, y: 202), controlPoint1: CGPoint(x: 67, y: 201.33), controlPoint2: CGPoint(x: 67, y: 201.67))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 67, y: 203), controlPoint1: CGPoint(x: 67, y: 202.33), controlPoint2: CGPoint(x: 67, y: 202.67))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 71.31, y: 168.02))
        rectangle2649Path.addLineToPoint(CGPoint(x: 65.55, y: 166.47))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 64.84, y: 165.25), controlPoint1: CGPoint(x: 65.01, y: 166.33), controlPoint2: CGPoint(x: 64.7, y: 165.78))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 66.06, y: 164.54), controlPoint1: CGPoint(x: 64.98, y: 164.71), controlPoint2: CGPoint(x: 65.53, y: 164.4))
        rectangle2649Path.addLineToPoint(CGPoint(x: 71.83, y: 166.09))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 71.31, y: 168.02), controlPoint1: CGPoint(x: 71.65, y: 166.73), controlPoint2: CGPoint(x: 71.48, y: 167.37))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 84.57, y: 135.36))
        rectangle2649Path.addLineToPoint(CGPoint(x: 79.39, y: 132.37))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 79.02, y: 131), controlPoint1: CGPoint(x: 78.91, y: 132.09), controlPoint2: CGPoint(x: 78.75, y: 131.48))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 80.39, y: 130.63), controlPoint1: CGPoint(x: 79.3, y: 130.52), controlPoint2: CGPoint(x: 79.91, y: 130.36))
        rectangle2649Path.addLineToPoint(CGPoint(x: 85.57, y: 133.63))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 84.57, y: 135.36), controlPoint1: CGPoint(x: 85.23, y: 134.2), controlPoint2: CGPoint(x: 84.9, y: 134.78))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 105.84, y: 107.25))
        rectangle2649Path.addLineToPoint(CGPoint(x: 101.59, y: 103.01))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 101.59, y: 101.59), controlPoint1: CGPoint(x: 101.2, y: 102.61), controlPoint2: CGPoint(x: 101.2, y: 101.98))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 103.01, y: 101.59), controlPoint1: CGPoint(x: 101.98, y: 101.2), controlPoint2: CGPoint(x: 102.61, y: 101.2))
        rectangle2649Path.addLineToPoint(CGPoint(x: 107.25, y: 105.84))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 105.84, y: 107.25), controlPoint1: CGPoint(x: 106.78, y: 106.3), controlPoint2: CGPoint(x: 106.3, y: 106.78))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 133.63, y: 85.57))
        rectangle2649Path.addLineToPoint(CGPoint(x: 130.63, y: 80.39))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 131, y: 79.02), controlPoint1: CGPoint(x: 130.35, y: 79.91), controlPoint2: CGPoint(x: 130.52, y: 79.3))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 132.37, y: 79.39), controlPoint1: CGPoint(x: 131.48, y: 78.75), controlPoint2: CGPoint(x: 132.09, y: 78.91))
        rectangle2649Path.addLineToPoint(CGPoint(x: 135.36, y: 84.57))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 133.63, y: 85.57), controlPoint1: CGPoint(x: 134.78, y: 84.9), controlPoint2: CGPoint(x: 134.2, y: 85.23))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 166.09, y: 71.83))
        rectangle2649Path.addLineToPoint(CGPoint(x: 164.54, y: 66.06))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 165.25, y: 64.84), controlPoint1: CGPoint(x: 164.4, y: 65.52), controlPoint2: CGPoint(x: 164.71, y: 64.98))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 166.47, y: 65.55), controlPoint1: CGPoint(x: 165.78, y: 64.69), controlPoint2: CGPoint(x: 166.33, y: 65.01))
        rectangle2649Path.addLineToPoint(CGPoint(x: 168.02, y: 71.31))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 166.09, y: 71.83), controlPoint1: CGPoint(x: 167.37, y: 71.48), controlPoint2: CGPoint(x: 166.73, y: 71.65))
        rectangle2649Path.closePath()
        rectangle2649Path.moveToPoint(CGPoint(x: 201, y: 67))
        rectangle2649Path.addLineToPoint(CGPoint(x: 201, y: 61))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 202, y: 60), controlPoint1: CGPoint(x: 201, y: 60.44), controlPoint2: CGPoint(x: 201.45, y: 60))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 203, y: 61), controlPoint1: CGPoint(x: 202.56, y: 60), controlPoint2: CGPoint(x: 203, y: 60.45))
        rectangle2649Path.addLineToPoint(CGPoint(x: 203, y: 67))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 202, y: 67), controlPoint1: CGPoint(x: 202.67, y: 67), controlPoint2: CGPoint(x: 202.33, y: 67))
        rectangle2649Path.addCurveToPoint(CGPoint(x: 201, y: 67), controlPoint1: CGPoint(x: 201.67, y: 67), controlPoint2: CGPoint(x: 201.33, y: 67))
        rectangle2649Path.closePath()
        rectangle2649Path.miterLimit = 4;

        rectangle2649Path.usesEvenOddFillRule = true;

        fillColor5.setFill()
        rectangle2649Path.fill()


        //// path-11 Drawing
        let path11Path = UIBezierPath()
        path11Path.moveToPoint(CGPoint(x: 202, y: 332))
        path11Path.addCurveToPoint(CGPoint(x: 332, y: 202), controlPoint1: CGPoint(x: 273.8, y: 332), controlPoint2: CGPoint(x: 332, y: 273.8))
        path11Path.addCurveToPoint(CGPoint(x: 202, y: 72), controlPoint1: CGPoint(x: 332, y: 130.2), controlPoint2: CGPoint(x: 273.8, y: 72))
        path11Path.addCurveToPoint(CGPoint(x: 72, y: 202), controlPoint1: CGPoint(x: 130.2, y: 72), controlPoint2: CGPoint(x: 72, y: 130.2))
        path11Path.addCurveToPoint(CGPoint(x: 202, y: 332), controlPoint1: CGPoint(x: 72, y: 273.8), controlPoint2: CGPoint(x: 130.2, y: 332))
        path11Path.closePath()
        path11Path.miterLimit = 4;

        path11Path.usesEvenOddFillRule = true;

        circleColor.setStroke()
        path11Path.lineWidth = 2
        path11Path.stroke()


        //// path-13 Drawing
        let path13Path = UIBezierPath(ovalInRect: CGRect(x: 60, y: 60, width: 284, height: 284))
        circleColor.setStroke()
        path13Path.lineWidth = 2
        path13Path.stroke()




        //// Oval- 12 Drawing
        let oval12Path = UIBezierPath(ovalInRect: CGRect(x: 47, y: 47, width: 310, height: 310))
        CGContextSaveGState(context!)
        oval12Path.addClip()
        CGContextDrawLinearGradient(context!, linearGradient15,
            CGPoint(x: 202, y: 248.37),
            CGPoint(x: 292.17, y: 85.51),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context!)


        //// Group- 12
        //// HourNeedle
        CGContextSaveGState(context!)
        CGContextTranslateCTM(context!, 202, 202)
        CGContextRotateCTM(context!, -hourAngle * CGFloat(M_PI) / 180)



        //// path-17 Drawing
        let path17Path = UIBezierPath()
        path17Path.moveToPoint(CGPoint(x: 0.5, y: -5.75))
        path17Path.addLineToPoint(CGPoint(x: -51.25, y: -102.75))
        path17Path.addCurveToPoint(CGPoint(x: -54, y: -101.5), controlPoint1: CGPoint(x: -51.25, y: -102.75), controlPoint2: CGPoint(x: -54, y: -104))
        path17Path.addCurveToPoint(CGPoint(x: -3.5, y: 0), controlPoint1: CGPoint(x: -54, y: -99), controlPoint2: CGPoint(x: -3.5, y: 0))
        path17Path.addLineToPoint(CGPoint(x: 0.5, y: -5.75))
        path17Path.closePath()
        path17Path.miterLimit = 4;

        path17Path.usesEvenOddFillRule = true;

        fillColor2.setFill()
        path17Path.fill()


        //// path- 5 Drawing
        let path5Path = UIBezierPath()
        path5Path.moveToPoint(CGPoint(x: 0.5, y: -5.75))
        path5Path.addLineToPoint(CGPoint(x: -51.25, y: -102.75))
        path5Path.addCurveToPoint(CGPoint(x: -54, y: -101.5), controlPoint1: CGPoint(x: -51.25, y: -102.75), controlPoint2: CGPoint(x: -54, y: -104))
        path5Path.addCurveToPoint(CGPoint(x: -3.5, y: 0), controlPoint1: CGPoint(x: -54, y: -99), controlPoint2: CGPoint(x: -3.5, y: 0))
        path5Path.addLineToPoint(CGPoint(x: 0.5, y: -5.75))
        path5Path.closePath()
        path5Path.miterLimit = 4;

        path5Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context!)
        path5Path.addClip()
        CGContextDrawLinearGradient(context!, hourGradient,
            CGPoint(x: -26.75, y: -103.06),
            CGPoint(x: -26.75, y: 0),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context!)



        CGContextRestoreGState(context!)


        //// MinuteNeedle
        CGContextSaveGState(context!)
        CGContextTranslateCTM(context!, 202, 202)
        CGContextRotateCTM(context!, -minuteAngle * CGFloat(M_PI) / 180)



        //// Path- 7 Drawing
        let path7Path = UIBezierPath()
        path7Path.moveToPoint(CGPoint(x: 45.81, y: -80.83))
        path7Path.addLineToPoint(CGPoint(x: 58.86, y: -105.13))
        path7Path.addCurveToPoint(CGPoint(x: 55.59, y: -102.02), controlPoint1: CGPoint(x: 58.86, y: -105.13), controlPoint2: CGPoint(x: 57.91, y: -106.7))
        path7Path.addCurveToPoint(CGPoint(x: 30.09, y: -67.97), controlPoint1: CGPoint(x: 41.05, y: -70.43), controlPoint2: CGPoint(x: 33.97, y: -70.25))
        path7Path.addCurveToPoint(CGPoint(x: 29.69, y: -63.51), controlPoint1: CGPoint(x: 26.22, y: -65.69), controlPoint2: CGPoint(x: 28.54, y: -64.54))
        path7Path.addCurveToPoint(CGPoint(x: 34.05, y: -63.76), controlPoint1: CGPoint(x: 30.84, y: -62.47), controlPoint2: CGPoint(x: 34.05, y: -63.76))
        path7Path.addLineToPoint(CGPoint(x: -40.48, y: 69.83))
        path7Path.addLineToPoint(CGPoint(x: -36.83, y: 71.55))
        path7Path.addLineToPoint(CGPoint(x: -33.56, y: 73.54))
        path7Path.addLineToPoint(CGPoint(x: 37.89, y: -61.72))
        path7Path.addCurveToPoint(CGPoint(x: 40.05, y: -57.92), controlPoint1: CGPoint(x: 37.89, y: -61.72), controlPoint2: CGPoint(x: 38.55, y: -58.32))
        path7Path.addCurveToPoint(CGPoint(x: 43.57, y: -60.69), controlPoint1: CGPoint(x: 41.54, y: -57.52), controlPoint2: CGPoint(x: 43.77, y: -56.2))
        path7Path.addCurveToPoint(CGPoint(x: 58.24, y: -100.62), controlPoint1: CGPoint(x: 43.37, y: -65.18), controlPoint2: CGPoint(x: 39.67, y: -71.22))
        path7Path.addCurveToPoint(CGPoint(x: 59.07, y: -105.05), controlPoint1: CGPoint(x: 60.91, y: -105.12), controlPoint2: CGPoint(x: 59.07, y: -105.05))
        path7Path.addLineToPoint(CGPoint(x: 45.81, y: -80.83))
        path7Path.closePath()
        path7Path.miterLimit = 4;

        path7Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context!)
        path7Path.addClip()
        CGContextDrawLinearGradient(context!, minuteGradient,
            CGPoint(x: 57.11, y: -105.06),
            CGPoint(x: -34.34, y: 72.02),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context!)


        //// Path- 8 Drawing
        let path8Path = UIBezierPath()
        path8Path.moveToPoint(CGPoint(x: -36.39, y: 70.81))
        path8Path.addCurveToPoint(CGPoint(x: -50.59, y: 70.08), controlPoint1: CGPoint(x: -36.39, y: 70.81), controlPoint2: CGPoint(x: -42.77, y: 65.74))
        path8Path.addCurveToPoint(CGPoint(x: -56.45, y: 78.08), controlPoint1: CGPoint(x: -57.07, y: 76.19), controlPoint2: CGPoint(x: -56.02, y: 77.02))
        path8Path.addCurveToPoint(CGPoint(x: -57.39, y: 80.4), controlPoint1: CGPoint(x: -56.45, y: 78.08), controlPoint2: CGPoint(x: -57.39, y: 79.91))
        path8Path.addCurveToPoint(CGPoint(x: -51.53, y: 81.03), controlPoint1: CGPoint(x: -57.36, y: 82.33), controlPoint2: CGPoint(x: -55.94, y: 85.24))
        path8Path.addCurveToPoint(CGPoint(x: -41.35, y: 80.02), controlPoint1: CGPoint(x: -46.02, y: 76.19), controlPoint2: CGPoint(x: -41.35, y: 80.02))
        path8Path.addCurveToPoint(CGPoint(x: -36.76, y: 89.23), controlPoint1: CGPoint(x: -41.35, y: 80.02), controlPoint2: CGPoint(x: -35.38, y: 82))
        path8Path.addCurveToPoint(CGPoint(x: -31.31, y: 91.81), controlPoint1: CGPoint(x: -38.13, y: 96.46), controlPoint2: CGPoint(x: -32.46, y: 94.65))
        path8Path.addCurveToPoint(CGPoint(x: -31.18, y: 91.48), controlPoint1: CGPoint(x: -31.25, y: 91.65), controlPoint2: CGPoint(x: -33.4, y: 95.85))
        path8Path.addCurveToPoint(CGPoint(x: -28.54, y: 79.87), controlPoint1: CGPoint(x: -28.26, y: 86.95), controlPoint2: CGPoint(x: -28.26, y: 83.59))
        path8Path.addCurveToPoint(CGPoint(x: -36.39, y: 70.81), controlPoint1: CGPoint(x: -28.79, y: 74.83), controlPoint2: CGPoint(x: -36.39, y: 70.81))
        path8Path.closePath()
        path8Path.miterLimit = 4;

        path8Path.usesEvenOddFillRule = true;

        fillColor6.setFill()
        path8Path.fill()



        CGContextRestoreGState(context!)


        //// Oval- 13
        //// path-21 Drawing
        let path21Path = UIBezierPath(ovalInRect: CGRect(x: 182, y: 182, width: 40, height: 40))
        fillColor2.setFill()
        path21Path.fill()


        //// path- 10 Drawing
        let path10Path = UIBezierPath(ovalInRect: CGRect(x: 182, y: 182, width: 40, height: 40))
        CGContextSaveGState(context!)
        path10Path.addClip()
        CGContextDrawLinearGradient(context!, centerGradient, CGPoint(x: 202, y: 182), CGPoint(x: 202, y: 222), CGGradientDrawingOptions())
        CGContextRestoreGState(context!)




        //// Group
        //// Group 3
        //// Group 2
        //// 12 Drawing
        let _12Rect = CGRect(x: 192, y: 73, width: 20, height: 21)
        let _12TextContent = NSString(string: "12")
        let _12Style = NSMutableParagraphStyle()
        _12Style.alignment = .Left

        let _12FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: _12Style]

        let _12TextHeight: CGFloat = _12TextContent.boundingRectWithSize(CGSize(width: _12Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: _12FontAttributes, context: nil).size.height
        CGContextSaveGState(context!)
        CGContextClipToRect(context!, _12Rect)
        _12TextContent.drawInRect(CGRect(x: _12Rect.minX, y: _12Rect.minY + (_12Rect.height - _12TextHeight) / 2, width: _12Rect.width, height: _12TextHeight), withAttributes: _12FontAttributes)
        CGContextRestoreGState(context!)


        //// 3 Drawing
        let _3Rect = CGRect(x: 314, y: 192, width: 20, height: 21)
        let _3TextContent = NSString(string: "3")
        let _3Style = NSMutableParagraphStyle()
        _3Style.alignment = .Center

        let _3FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: _3Style]

        let _3TextHeight: CGFloat = _3TextContent.boundingRectWithSize(CGSize(width: _3Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: _3FontAttributes, context: nil).size.height
        CGContextSaveGState(context!)
        CGContextClipToRect(context!, _3Rect)
        _3TextContent.drawInRect(CGRect(x: _3Rect.minX, y: _3Rect.minY + (_3Rect.height - _3TextHeight) / 2, width: _3Rect.width, height: _3TextHeight), withAttributes: _3FontAttributes)
        CGContextRestoreGState(context!)


        //// 6 Drawing
        let _6Rect = CGRect(x: 193, y: 311, width: 20, height: 21)
        let _6TextContent = NSString(string: "6")
        let _6Style = NSMutableParagraphStyle()
        _6Style.alignment = .Center

        let _6FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: _6Style]

        let _6TextHeight: CGFloat = _6TextContent.boundingRectWithSize(CGSize(width: _6Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: _6FontAttributes, context: nil).size.height
        CGContextSaveGState(context!)
        CGContextClipToRect(context!, _6Rect)
        _6TextContent.drawInRect(CGRect(x: _6Rect.minX, y: _6Rect.minY + (_6Rect.height - _6TextHeight) / 2, width: _6Rect.width, height: _6TextHeight), withAttributes: _6FontAttributes)
        CGContextRestoreGState(context!)


        //// 9 Drawing
        let _9Rect = CGRect(x: 73, y: 192, width: 20, height: 21)
        let _9TextContent = NSString(string: "9")
        let _9Style = NSMutableParagraphStyle()
        _9Style.alignment = .Center

        let _9FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: _9Style]

        let _9TextHeight: CGFloat = _9TextContent.boundingRectWithSize(CGSize(width: _9Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: _9FontAttributes, context: nil).size.height
        CGContextSaveGState(context!)
        CGContextClipToRect(context!, _9Rect)
        _9TextContent.drawInRect(CGRect(x: _9Rect.minX, y: _9Rect.minY + (_9Rect.height - _9TextHeight) / 2, width: _9Rect.width, height: _9TextHeight), withAttributes: _9FontAttributes)
        CGContextRestoreGState(context!)


        //// 1 Drawing
        let _1Rect = CGRect(x: 254, y: 91, width: 20, height: 21)
        let _1TextContent = NSString(string: "1")
        let _1Style = NSMutableParagraphStyle()
        _1Style.alignment = .Center

        let _1FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: _1Style]

        let _1TextHeight: CGFloat = _1TextContent.boundingRectWithSize(CGSize(width: _1Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: _1FontAttributes, context: nil).size.height
        CGContextSaveGState(context!)
        CGContextClipToRect(context!, _1Rect)
        _1TextContent.drawInRect(CGRect(x: _1Rect.minX, y: _1Rect.minY + (_1Rect.height - _1TextHeight) / 2, width: _1Rect.width, height: _1TextHeight), withAttributes: _1FontAttributes)
        CGContextRestoreGState(context!)


        //// 2 Drawing
        let _2Rect = CGRect(x: 293, y: 129, width: 20, height: 21)
        let _2TextContent = NSString(string: "2")
        let _2Style = NSMutableParagraphStyle()
        _2Style.alignment = .Center

        let _2FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: _2Style]

        let _2TextHeight: CGFloat = _2TextContent.boundingRectWithSize(CGSize(width: _2Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: _2FontAttributes, context: nil).size.height
        CGContextSaveGState(context!)
        CGContextClipToRect(context!, _2Rect)
        _2TextContent.drawInRect(CGRect(x: _2Rect.minX, y: _2Rect.minY + (_2Rect.height - _2TextHeight) / 2, width: _2Rect.width, height: _2TextHeight), withAttributes: _2FontAttributes)
        CGContextRestoreGState(context!)


        //// 4 Drawing
        let _4Rect = CGRect(x: 296, y: 252, width: 20, height: 21)
        let _4TextContent = NSString(string: "4")
        let _4Style = NSMutableParagraphStyle()
        _4Style.alignment = .Center

        let _4FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: _4Style]

        let _4TextHeight: CGFloat = _4TextContent.boundingRectWithSize(CGSize(width: _4Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: _4FontAttributes, context: nil).size.height
        CGContextSaveGState(context!)
        CGContextClipToRect(context!, _4Rect)
        _4TextContent.drawInRect(CGRect(x: _4Rect.minX, y: _4Rect.minY + (_4Rect.height - _4TextHeight) / 2, width: _4Rect.width, height: _4TextHeight), withAttributes: _4FontAttributes)
        CGContextRestoreGState(context!)


        //// 5 Drawing
        let _5Rect = CGRect(x: 253, y: 296, width: 20, height: 21)
        let _5TextContent = NSString(string: "5")
        let _5Style = NSMutableParagraphStyle()
        _5Style.alignment = .Center

        let _5FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: _5Style]

        let _5TextHeight: CGFloat = _5TextContent.boundingRectWithSize(CGSize(width: _5Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: _5FontAttributes, context: nil).size.height
        CGContextSaveGState(context!)
        CGContextClipToRect(context!, _5Rect)
        _5TextContent.drawInRect(CGRect(x: _5Rect.minX, y: _5Rect.minY + (_5Rect.height - _5TextHeight) / 2, width: _5Rect.width, height: _5TextHeight), withAttributes: _5FontAttributes)
        CGContextRestoreGState(context!)


        //// 7 Drawing
        let _7Rect = CGRect(x: 133, y: 295, width: 20, height: 21)
        let _7TextContent = NSString(string: "7")
        let _7Style = NSMutableParagraphStyle()
        _7Style.alignment = .Center

        let _7FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: _7Style]

        let _7TextHeight: CGFloat = _7TextContent.boundingRectWithSize(CGSize(width: _7Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: _7FontAttributes, context: nil).size.height
        CGContextSaveGState(context!)
        CGContextClipToRect(context!, _7Rect)
        _7TextContent.drawInRect(CGRect(x: _7Rect.minX, y: _7Rect.minY + (_7Rect.height - _7TextHeight) / 2, width: _7Rect.width, height: _7TextHeight), withAttributes: _7FontAttributes)
        CGContextRestoreGState(context!)


        //// 8 Drawing
        let _8Rect = CGRect(x: 89, y: 253, width: 20, height: 21)
        let _8TextContent = NSString(string: "8")
        let _8Style = NSMutableParagraphStyle()
        _8Style.alignment = .Center

        let _8FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: _8Style]

        let _8TextHeight: CGFloat = _8TextContent.boundingRectWithSize(CGSize(width: _8Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: _8FontAttributes, context: nil).size.height
        CGContextSaveGState(context!)
        CGContextClipToRect(context!, _8Rect)
        _8TextContent.drawInRect(CGRect(x: _8Rect.minX, y: _8Rect.minY + (_8Rect.height - _8TextHeight) / 2, width: _8Rect.width, height: _8TextHeight), withAttributes: _8FontAttributes)
        CGContextRestoreGState(context!)


        //// 11 Drawing
        let _11Rect = CGRect(x: 89, y: 131, width: 20, height: 21)
        let _11TextContent = NSString(string: "11")
        let _11Style = NSMutableParagraphStyle()
        _11Style.alignment = .Center

        let _11FontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: _11Style]

        let _11TextHeight: CGFloat = _11TextContent.boundingRectWithSize(CGSize(width: _11Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: _11FontAttributes, context: nil).size.height
        CGContextSaveGState(context!)
        CGContextClipToRect(context!, _11Rect)
        _11TextContent.drawInRect(CGRect(x: _11Rect.minX, y: _11Rect.minY + (_11Rect.height - _11TextHeight) / 2, width: _11Rect.width, height: _11TextHeight), withAttributes: _11FontAttributes)
        CGContextRestoreGState(context!)






        //// Rectangle  Drawing
        let rectangleRect = CGRect(x: 131, y: 90, width: 20, height: 21)
        let rectangleTextContent = NSString(string: "8")
        let rectangleStyle = NSMutableParagraphStyle()
        rectangleStyle.alignment = .Center

        let rectangleFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(UIFont.labelFontSize()), NSForegroundColorAttributeName: strokeColor, NSParagraphStyleAttributeName: rectangleStyle]

        let rectangleTextHeight: CGFloat = rectangleTextContent.boundingRectWithSize(CGSize(width: rectangleRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: rectangleFontAttributes, context: nil).size.height
        CGContextSaveGState(context!)
        CGContextClipToRect(context!, rectangleRect)
        rectangleTextContent.drawInRect(CGRect(x: rectangleRect.minX, y: rectangleRect.minY + (rectangleRect.height - rectangleTextHeight) / 2, width: rectangleRect.width, height: rectangleTextHeight), withAttributes: rectangleFontAttributes)
        CGContextRestoreGState(context!)
    }

    public class func drawMyClocks(frame frame: CGRect = CGRect(x: 20, y: 20, width: 160, height: 160), myHour: CGFloat = 0, myMinute: CGFloat = 35) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Clock One Drawing
        let clockOneRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height)
        CGContextSaveGState(context!)
        UIRectClip(clockOneRect)
        CGContextTranslateCTM(context!, clockOneRect.origin.x, clockOneRect.origin.y)
        CGContextScaleCTM(context!, clockOneRect.size.width / 400, clockOneRect.size.height / 400)

        RealClockKit.drawColock(hours: myHour, minutes: myMinute)
        CGContextRestoreGState(context!)
    }

}
