//
//  MyStyleKit.swift
//  DashBoard
//
//  Created by luowei on 2016/10/17.
//  Copyright (c) 2016 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class MyStyleKit : NSObject {

    //// Drawing Methods

    public class func drawDashBoard(frame: CGRect = CGRect(x: 0, y: 0, width: 120, height: 120), pressure: CGFloat = 0.572) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 0.406, green: 0.800, blue: 0.320, alpha: 1.000)
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let warnColor = UIColor(hue: 1, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let centerWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let expression: CGFloat = 120 - 240 * pressure
        let lightColor = pressure > 0.75 ? warnColor : color


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + floor((frame.width - 79) * 0.51220 + 0.5), y: frame.minY + floor((frame.height - 78.5) * 0.49398 + 0.5), width: 79, height: 78.5)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: frame.minX + floor((frame.width - 100) * 0.50000 + 0.5), y: frame.minY + floor((frame.height - 100) * 0.50000 + 0.5), width: 100, height: 100))
        UIColor.grayColor().setStroke()
        ovalPath.lineWidth = 4
        ovalPath.stroke()


        //// Rectangle Drawing
        CGContextSaveGState(context!)
        CGContextTranslateCTM(context!, frame.minX + 0.50000 * frame.width, frame.minY + 0.50000 * frame.height)
        CGContextRotateCTM(context!, -expression * CGFloat(M_PI) / 180)

        let rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPoint(x: -4, y: 3))
        rectanglePath.addLineToPoint(CGPoint(x: -5, y: 3))
        rectanglePath.addLineToPoint(CGPoint(x: -5, y: 11))
        rectanglePath.addLineToPoint(CGPoint(x: 5, y: 11))
        rectanglePath.addLineToPoint(CGPoint(x: 5, y: 3))
        rectanglePath.addLineToPoint(CGPoint(x: 4, y: 3))
        rectanglePath.addLineToPoint(CGPoint(x: 4, y: -28))
        rectanglePath.addCurveToPoint(CGPoint(x: 0, y: -34), controlPoint1: CGPoint(x: 4, y: -28), controlPoint2: CGPoint(x: 2, y: -34))
        rectanglePath.addCurveToPoint(CGPoint(x: -4, y: -28), controlPoint1: CGPoint(x: -2, y: -34), controlPoint2: CGPoint(x: -4, y: -28))
        rectanglePath.addLineToPoint(CGPoint(x: -4, y: 3))
        rectanglePath.closePath()
        UIColor.grayColor().setFill()
        rectanglePath.fill()

        CGContextRestoreGState(context!)


        //// Group
        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.moveToPoint(CGPoint(x: group.minX + 39, y: group.minY))
        bezier8Path.addLineToPoint(CGPoint(x: group.minX + 39, y: group.minY + 7))
        bezier8Path.moveToPoint(CGPoint(x: group.minX, y: group.minY + 39.17))
        bezier8Path.addLineToPoint(CGPoint(x: group.minX + 7, y: group.minY + 39.17))
        bezier8Path.moveToPoint(CGPoint(x: group.minX + 78.23, y: group.minY + 39.5))
        bezier8Path.addLineToPoint(CGPoint(x: group.minX + 71.23, y: group.minY + 39.5))
        bezier8Path.moveToPoint(CGPoint(x: group.minX + 19, y: group.minY + 5.24))
        bezier8Path.addLineToPoint(CGPoint(x: group.minX + 23.37, y: group.minY + 10.8))
        bezier8Path.moveToPoint(CGPoint(x: group.minX + 5.58, y: group.minY + 19.22))
        bezier8Path.addLineToPoint(CGPoint(x: group.minX + 11.15, y: group.minY + 23.58))
        bezier8Path.moveToPoint(CGPoint(x: group.minX + 60, y: group.minY + 5.5))
        bezier8Path.addLineToPoint(CGPoint(x: group.minX + 54.54, y: group.minY + 11.58))
        bezier8Path.moveToPoint(CGPoint(x: group.minX + 73, y: group.minY + 19.5))
        bezier8Path.addLineToPoint(CGPoint(x: group.minX + 67.1, y: group.minY + 23.28))
        bezier8Path.lineCapStyle = .Round;

        bezier8Path.lineJoinStyle = .Round;

        UIColor.grayColor().setStroke()
        bezier8Path.lineWidth = 2
        bezier8Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: group.minX + 78, y: group.minY + 39.5))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 71.98, y: group.minY + 60.33), controlPoint1: CGPoint(x: group.minX + 78, y: group.minY + 47.16), controlPoint2: CGPoint(x: group.minX + 75.79, y: group.minY + 54.31))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 58.8, y: group.minY + 54.76), controlPoint1: CGPoint(x: group.minX + 67.44, y: group.minY + 58.41), controlPoint2: CGPoint(x: group.minX + 62.94, y: group.minY + 56.51))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 64, y: group.minY + 39.5), controlPoint1: CGPoint(x: group.minX + 62.06, y: group.minY + 50.54), controlPoint2: CGPoint(x: group.minX + 64, y: group.minY + 45.25))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 39, y: group.minY + 14.5), controlPoint1: CGPoint(x: group.minX + 64, y: group.minY + 25.69), controlPoint2: CGPoint(x: group.minX + 52.81, y: group.minY + 14.5))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 30.25, y: group.minY + 16.07), controlPoint1: CGPoint(x: group.minX + 35.92, y: group.minY + 14.5), controlPoint2: CGPoint(x: group.minX + 32.98, y: group.minY + 15.06))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 14, y: group.minY + 39.5), controlPoint1: CGPoint(x: group.minX + 20.76, y: group.minY + 19.62), controlPoint2: CGPoint(x: group.minX + 14, y: group.minY + 28.77))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 19.51, y: group.minY + 55.15), controlPoint1: CGPoint(x: group.minX + 14, y: group.minY + 45.42), controlPoint2: CGPoint(x: group.minX + 16.06, y: group.minY + 50.87))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 6.39, y: group.minY + 60.9), controlPoint1: CGPoint(x: group.minX + 15.38, y: group.minY + 56.96), controlPoint2: CGPoint(x: group.minX + 10.9, y: group.minY + 58.92))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX, y: group.minY + 39.5), controlPoint1: CGPoint(x: group.minX + 2.35, y: group.minY + 54.76), controlPoint2: CGPoint(x: group.minX, y: group.minY + 47.4))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 20.57, y: group.minY + 5.12), controlPoint1: CGPoint(x: group.minX, y: group.minY + 24.63), controlPoint2: CGPoint(x: group.minX + 8.33, y: group.minY + 11.7))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 21.59, y: group.minY + 4.59), controlPoint1: CGPoint(x: group.minX + 20.91, y: group.minY + 4.94), controlPoint2: CGPoint(x: group.minX + 21.25, y: group.minY + 4.76))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 39, y: group.minY + 0.5), controlPoint1: CGPoint(x: group.minX + 26.83, y: group.minY + 1.97), controlPoint2: CGPoint(x: group.minX + 32.74, y: group.minY + 0.5))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 78, y: group.minY + 39.5), controlPoint1: CGPoint(x: group.minX + 60.54, y: group.minY + 0.5), controlPoint2: CGPoint(x: group.minX + 78, y: group.minY + 17.96))
        bezierPath.closePath()
        bezierPath.lineJoinStyle = .Round;

        UIColor.grayColor().setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPoint(x: group.minX + 60.36, y: group.minY + 72.13))
        bezier3Path.addCurveToPoint(CGPoint(x: group.minX + 39, y: group.minY + 78.5), controlPoint1: CGPoint(x: group.minX + 54.23, y: group.minY + 76.16), controlPoint2: CGPoint(x: group.minX + 46.89, y: group.minY + 78.5))
        bezier3Path.addCurveToPoint(CGPoint(x: group.minX + 18.04, y: group.minY + 72.4), controlPoint1: CGPoint(x: group.minX + 31.29, y: group.minY + 78.5), controlPoint2: CGPoint(x: group.minX + 24.1, y: group.minY + 76.26))
        bezier3Path.addCurveToPoint(CGPoint(x: group.minX + 30.44, y: group.minY + 63), controlPoint1: CGPoint(x: group.minX + 22.39, y: group.minY + 69.1), controlPoint2: CGPoint(x: group.minX + 26.8, y: group.minY + 65.76))
        bezier3Path.addCurveToPoint(CGPoint(x: group.minX + 39, y: group.minY + 64.5), controlPoint1: CGPoint(x: group.minX + 33.11, y: group.minY + 63.97), controlPoint2: CGPoint(x: group.minX + 35.99, y: group.minY + 64.5))
        bezier3Path.addCurveToPoint(CGPoint(x: group.minX + 47.77, y: group.minY + 62.92), controlPoint1: CGPoint(x: group.minX + 42.09, y: group.minY + 64.5), controlPoint2: CGPoint(x: group.minX + 45.04, y: group.minY + 63.94))
        bezier3Path.addCurveToPoint(CGPoint(x: group.minX + 60.36, y: group.minY + 72.13), controlPoint1: CGPoint(x: group.minX + 51.49, y: group.minY + 65.64), controlPoint2: CGPoint(x: group.minX + 55.97, y: group.minY + 68.92))
        bezier3Path.closePath()
        bezier3Path.lineCapStyle = .Round;

        bezier3Path.lineJoinStyle = .Round;

        lightColor.setFill()
        bezier3Path.fill()
        UIColor.grayColor().setStroke()
        bezier3Path.lineWidth = 4
        bezier3Path.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: group.minX + 75, y: group.minY + 15, width: 4, height: 4))
        warnColor.setFill()
        oval2Path.fill()
        UIColor.grayColor().setStroke()
        oval2Path.lineWidth = 1.5
        oval2Path.stroke()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalInRect: CGRect(x: group.minX + 34, y: group.minY + 34.5, width: 10, height: 10))
        centerWhite.setFill()
        oval4Path.fill()
        UIColor.grayColor().setStroke()
        oval4Path.lineWidth = 2
        oval4Path.stroke()
    }

}
