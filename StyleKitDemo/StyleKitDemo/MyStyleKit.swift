//
//  MyStyleKit.swift
//  StyleKitDemo
//
//  Created by luowei on 2016/10/16.
//  Copyright (c) 2016 wodedata. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class MyStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let borderColor: UIColor = UIColor(red: 0.395, green: 0.926, blue: 0.757, alpha: 1.000)
        static var imageOfBubble: UIImage?
        static var bubbleTargets: [AnyObject]?
        static var imageOfPaperPlane: UIImage?
        static var paperPlaneTargets: [AnyObject]?
        static var imageOfLocationIcon: UIImage?
        static var locationIconTargets: [AnyObject]?
    }

    //// Colors

    public class var borderColor: UIColor { return Cache.borderColor }

    //// Drawing Methods

    public class func drawBubble() {
        //// Color Declarations
        let contentColor = MyStyleKit.borderColor.colorWithSaturation(newSaturation: 0.2)

        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x:194, y:99.5))
        ovalPath.addCurve(to: CGPoint(x:100, y:193), controlPoint1: CGPoint(x:194, y:151.14), controlPoint2: CGPoint(x:151.91, y:193))
        ovalPath.addCurve(to: CGPoint(x:6, y:99.5), controlPoint1: CGPoint(x:48.09, y:193), controlPoint2: CGPoint(x:6, y:151.14))
        ovalPath.addCurve(to: CGPoint(x:100, y:6), controlPoint1: CGPoint(x:6, y:47.86), controlPoint2: CGPoint(x:48.09, y:6))
        ovalPath.addCurve(to: CGPoint(x:194, y:99.5), controlPoint1: CGPoint(x:151.91, y:6), controlPoint2: CGPoint(x:194, y:47.86))
        ovalPath.close()
        contentColor.setFill()
        ovalPath.fill()
        MyStyleKit.borderColor.setStroke()
        ovalPath.lineWidth = 6
        ovalPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x:156, y:94.08))
        bezier2Path.addCurve(to: CGPoint(x:102, y:135.17), controlPoint1: CGPoint(x:156, y:116.77), controlPoint2: CGPoint(x:131.82, y:135.17))
        bezier2Path.addCurve(to: CGPoint(x:82.69, y:132.47), controlPoint1: CGPoint(x:95.2, y:135.17), controlPoint2: CGPoint(x:88.69, y:134.21))
        bezier2Path.addCurve(to: CGPoint(x:48.34, y:140.5), controlPoint1: CGPoint(x:69.08, y:136.86), controlPoint2: CGPoint(x:48.34, y:140.5))
        bezier2Path.addCurve(to: CGPoint(x:65.01, y:124.01), controlPoint1: CGPoint(x:48.34, y:140.5), controlPoint2: CGPoint(x:58.63,y: 132.48))
        bezier2Path.addCurve(to: CGPoint(x:48, y:94.08), controlPoint1: CGPoint(x:54.54, y:116.52), controlPoint2: CGPoint(x:48, y:105.88))
        bezier2Path.addCurve(to: CGPoint(x:68.86, y:61.64), controlPoint1: CGPoint(x:48, y:80.9), controlPoint2: CGPoint(x:56.17, y:69.16))
        bezier2Path.addCurve(to: CGPoint(x:81.55, y:56.05), controlPoint1: CGPoint(x:72.71, y:59.36), controlPoint2: CGPoint(x:76.97, y:57.47))
        bezier2Path.addCurve(to: CGPoint(x:102, y:53), controlPoint1: CGPoint(x:87.86, y:54.08), controlPoint2: CGPoint(x:94.76, y:53))
        bezier2Path.addCurve(to: CGPoint(x:156, y:94.08), controlPoint1: CGPoint(x:131.82, y:53), controlPoint2: CGPoint(x:156, y:71.39))
        bezier2Path.close()
        MyStyleKit.borderColor.setStroke()
        bezier2Path.lineWidth = 6
        bezier2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x:58, y:93.69))
        bezierPath.addCurve(to: CGPoint(x:75, y:68.67), controlPoint1: CGPoint(x:58, y:83.52), controlPoint2: CGPoint(x:64.66, y:74.47))
        bezierPath.addCurve(to: CGPoint(x:85.34, y:64.35), controlPoint1: CGPoint(x:78.14, y:66.91), controlPoint2: CGPoint(x:81.61, y:65.45))
        bezierPath.addCurve(to: CGPoint(x:102, y:62), controlPoint1: CGPoint(x:90.48, y:62.84), controlPoint2: CGPoint(x:96.1, y:62))
        bezierPath.lineCapStyle = .round;

        MyStyleKit.borderColor.setStroke()
        bezierPath.lineWidth = 6
        bezierPath.stroke()
    }

    public class func drawPaperPlane() {
        //// Color Declarations
        let contentColor = MyStyleKit.borderColor.colorWithSaturation(newSaturation: 0.2)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x:7, y:6, width:187, height:187))
        contentColor.setFill()
        ovalPath.fill()
        MyStyleKit.borderColor.setStroke()
        ovalPath.lineWidth = 6
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x:133.5, y:35.5))
        bezierPath.addLine(to: CGPoint(x:36, y:121))
        bezierPath.addLine(to: CGPoint(x:71.5, y:131.5))
        bezierPath.addLine(to: CGPoint(x:93, y:159))
        bezierPath.addLine(to: CGPoint(x:99, y:139))
        bezierPath.addLine(to: CGPoint(x:134, y:148))
        bezierPath.addLine(to: CGPoint(x:133.5, y:35.5))
        bezierPath.close()
        MyStyleKit.borderColor.setStroke()
        bezierPath.lineWidth = 8
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x:134, y:35))
        bezier2Path.addLine(to: CGPoint(x:72, y:131))
        MyStyleKit.borderColor.setStroke()
        bezier2Path.lineWidth = 4
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x:133.5, y:35))
        bezier3Path.addLine(to: CGPoint(x:98.5, y:135))
        MyStyleKit.borderColor.setStroke()
        bezier3Path.lineWidth = 4
        bezier3Path.stroke()
    }

    public class func drawLocationIcon() {
        //// Color Declarations
        let contentColor = MyStyleKit.borderColor.colorWithSaturation(newSaturation: 0.2)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x:7, y:6, width:187, height:187))
        contentColor.setFill()
        ovalPath.fill()
        MyStyleKit.borderColor.setStroke()
        ovalPath.lineWidth = 6
        ovalPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath()
        oval2Path.move(to: CGPoint(x:150, y:80))
        oval2Path.addCurve(to: CGPoint(x:136, y:125), controlPoint1: CGPoint(x:150, y:92.71), controlPoint2: CGPoint(x:143.9, y:109.2))
        oval2Path.addCurve(to: CGPoint(x:100, y:170), controlPoint1: CGPoint(x:126.05, y:144.9), controlPoint2: CGPoint(x:112.78, y:170))
        oval2Path.addCurve(to: CGPoint(x:63, y:125), controlPoint1: CGPoint(x:86.97, y:170), controlPoint2: CGPoint(x:72.7, y:145.41))
        oval2Path.addCurve(to: CGPoint(x:51, y:80), controlPoint1: CGPoint(x:55.63, y:109.5), controlPoint2: CGPoint(x:51, y:92.4))
        oval2Path.addCurve(to: CGPoint(x:100.5, y:33), controlPoint1: CGPoint(x:51, y:51.28), controlPoint2: CGPoint(x:77.58, y:33))
        oval2Path.addCurve(to: CGPoint(x:150, y:80), controlPoint1: CGPoint(x:123.42, y:33), controlPoint2: CGPoint(x:150, y:51.28))
        oval2Path.close()
        MyStyleKit.borderColor.setStroke()
        oval2Path.lineWidth = 8
        oval2Path.stroke()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x:76, y:61, width:49, height:49))
        MyStyleKit.borderColor.setStroke()
        oval3Path.lineWidth = 4
        oval3Path.stroke()
    }

    //// Generated Images

    public class var imageOfBubble: UIImage {
        if Cache.imageOfBubble != nil {
            return Cache.imageOfBubble!
        }


        UIGraphicsBeginImageContextWithOptions(CGSize(width:200, height:200), false, 0)
        MyStyleKit.drawBubble()

        Cache.imageOfBubble = UIGraphicsGetImageFromCurrentImageContext()?.withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfBubble!
    }

    public class var imageOfPaperPlane: UIImage {
        if Cache.imageOfPaperPlane != nil {
            return Cache.imageOfPaperPlane!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width:200, height:200), false, 0)
            MyStyleKit.drawPaperPlane()

        Cache.imageOfPaperPlane = UIGraphicsGetImageFromCurrentImageContext()?.withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfPaperPlane!
    }

    public class var imageOfLocationIcon: UIImage {
        if Cache.imageOfLocationIcon != nil {
            return Cache.imageOfLocationIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width:200, height:200), false, 0)
            MyStyleKit.drawLocationIcon()

        Cache.imageOfLocationIcon = UIGraphicsGetImageFromCurrentImageContext()?.withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfLocationIcon!
    }

    //// Customization Infrastructure

    @IBOutlet var bubbleTargets: [AnyObject]! {
        get { return Cache.bubbleTargets }
        set {
            Cache.bubbleTargets = newValue
            for target: AnyObject in newValue {
                if target.responds(to: #selector(setter: UIImageView.image)) {
                    target.perform(#selector(setter: UIImageView.image), with: MyStyleKit.imageOfBubble)
                }
                
            }
        }
    }

    @IBOutlet var paperPlaneTargets: [AnyObject]! {
        get { return Cache.paperPlaneTargets }
        set {
            Cache.paperPlaneTargets = newValue
            for target: AnyObject in newValue {
                if target.responds(to: #selector(setter: UIImageView.image)) {
                    target.perform(#selector(setter: UIImageView.image), with:  MyStyleKit.imageOfPaperPlane)
                }

            }
        }
    }

    @IBOutlet var locationIconTargets: [AnyObject]! {
        get { return Cache.locationIconTargets }
        set {
            Cache.locationIconTargets = newValue
            for target: AnyObject in newValue {
                if target.responds(to: #selector(setter: UIImageView.image)) {
                    target.perform(#selector(setter: UIImageView.image), with:  MyStyleKit.imageOfLocationIcon)
                }
                
            }
        }
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
